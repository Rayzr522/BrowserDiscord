{"version":3,"sources":["webpack:///webpack/bootstrap d51f4e8986873e3e492c","webpack:///./src/storage.js","webpack:///./src/view.js","webpack:///./src/clean.js","webpack:///./src/index.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA,mDAA2C,cAAc;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;AChEA;AACA,WAAW,OAAO;AAClB,WAAW,IAAI;AACf;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,iCAAiC,sCAAsC,EAAE,IAAI,GAAG,uBAAuB;AACvG;AACA;;AAEA;AACA;;AAEA;AACA,E;;;;;;AC7CA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,sBAAsB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,SAAS,WAAW,wCAAwC;AAChH,aAAa;;AAEb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,sEAAsE,WAAW,OAAO,aAAa;AACrG,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB,GAAG;;AAE3B;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;;AAEA,wBAAwB,wBAAwB,IAAI,QAAQ;;AAE5D;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,oFAAoF,kBAAkB,MAAM,KAAK;AACjH;;AAEA,iDAAiD,QAAQ;;AAEzD;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,wFAAwF,oBAAoB,0BAA0B,eAAe;AACrJ;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,sB;;;;;;ACnLA;AACA,gCAAgC,GAAG;AACnC,wDAAwD;AACxD,8CAA8C,GAAG,OAAO,aAAa;AACrE,KAAK,oBAAoB,GAAG;AAC5B,kDAAkD;AAClD,oDAAoD,GAAG,OAAO,cAAc;AAC5E,KAAK,qBAAqB,GAAG;AAC7B;AACA;AACA,8CAA8C,UAAU;AACxD;AACA;AACA,KAAK;AACL,C;;;;;;ACdA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,wCAAwC,0BAA0B,GAAG,+BAA+B,IAAI,oBAAoB;;AAE5H;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,mCAAmC,YAAY;AAC/C;AACA;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA,0H","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap d51f4e8986873e3e492c","/**\n * @param {string} key The key of the property to get.\n * @param {any} value The (optional) value to set. Leave undefined to get a property.\n * \n * @returns {any} The value stored under the given key, or undefined if setting a value.\n */\nexports.ls = function ls(key, value) {\n    if (!value) {\n        return localStorage.getItem(key);\n    }\n    return localStorage.setItem(key, value);\n};\n\nexports.qs = function qs(key, value) {\n    let location = window.location.search;\n    if (location.indexOf('?') < 0) return;\n\n    let raw = location.substr(location.indexOf('?') + 1);\n\n    let mapped = {};\n    raw.split('&')\n        .map(item => item.split('='))\n        .forEach(item => mapped[item[0]] = decodeURI(item[1]));\n\n    if (!key) {\n        return mapped;\n    }\n\n    if (value) {\n        if (mapped[key] === value) {\n            return;\n        }\n\n        mapped[key] = value;\n\n        let newQueryString = '';\n        for (let key in mapped) {\n            newQueryString += `${newQueryString.length < 1 ? '?' : '&'}${key}=${encodeURI(mapped[key])}`\n        }\n        window.location.search = newQueryString;\n\n        return;\n    }\n\n    return mapped[key];\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/storage.js\n// module id = 0\n// module chunks = 0","const clean = require('./clean');\n\n/**\n * \n * \n * @param {string} query The query.\n * @returns {HTMLElement|undefined} An HTML element or array of elements matching the query.\n */\nfunction $(query) {\n    let result = document.querySelectorAll(query);\n    if (result.length <= 1) {\n        return result[0];\n    }\n    return result;\n}\n\nclass View {\n    constructor(bot) {\n        this.bot = bot;\n\n        /**\n         * The output for chat messages\n         * \n         * @type {HTMLDivElement}\n         */\n        this.chatContainer = $('#chat');\n\n        /**\n         * The message input box\n         * \n         * @type {HTMLInputElement}\n         */\n        this.messageInput = $('#message-input');\n\n        this.messageInput.onkeyup = event => {\n            if (event.keyCode === 13) {\n                let message = this.messageInput.value;\n                this.messageInput.value = '';\n\n                if (message) {\n                    this.bot.sendMessage(message);\n                }\n            }\n        }\n\n        /**\n         * The guild list container\n         * \n         * @type {HTMLDivElement}\n         */\n        this.guildContainer = $('#guilds');\n\n        /**\n         * The channel list container\n         * \n         * @type {HTMLDivElement}\n         */\n        this.channelContainer = $('#channels');\n\n        /**\n         * The ID of the last user to send a message\n         * \n         * @type {string}\n         */\n        this.lastUser = null;\n    }\n\n    get targetGuild() {\n        return this.bot.targetGuild;\n    }\n\n    get targetChannel() {\n        return this.bot.targetChannel;\n    }\n\n    updateGuilds() {\n        let html = '';\n\n        this.bot.client.guilds.array()\n            .sort((a, b) => a.name.localeCompare(b.name))\n            .forEach(guild => {\n                html += `<img class=\"guild-icon`;\n                if (this.targetGuild === guild.id) {\n                    html += ` guild-icon-selected`;\n                }\n                html += `\" onclick=\"bot.setGuild('${guild.id}')\" src=\"${guild.iconURL() || '//placehold.it/250'}\"></img>`;\n            });\n\n        this.guildContainer.innerHTML = html;\n    }\n\n    updateChannels() {\n        console.log('Updating channels...');\n        if (!this.targetGuild) {\n            console.error('No target guild!');\n            return;\n        }\n\n        let html = '';\n\n        this.targetGuild.channels.filter(channel => channel.type === 'text').forEach(channel => {\n            html += `<span class=\"channel\" onclick=\"bot.setChannel('${channel.id}')\">#${channel.name}</span>`;\n        });\n\n        this.channelContainer.innerHTML = html;\n    }\n\n    /**\n     * Adds a user mention to the message input box.\n     * \n     * @param {string} id The ID of the user to @mention.\n     * \n     * @memberof View\n     */\n    mentionUser(id) {\n        let message = this.messageInput.value;\n        if (!message.endsWith(' ')) {\n            message += ' ';\n        }\n\n        message += `<@${id}> `;\n\n        this.messageInput.value = message;\n        this.messageInput.focus();\n    }\n\n    /**\n     * Prints a message onto the chat area.\n     * \n     * @param {Message} message The message to log.\n     * \n     * @memberof View\n     */\n    displayMessage(message) {\n        let content = clean.discordToHtml(this.bot, message.content);\n\n        console.log(`[${message.author.username}] ${content}`);\n\n        let builder = `<div class=\"message\">`\n\n        if (this.lastUser !== message.author.id) {\n            this.lastUser = message.author.id;\n\n            let name = message.author.username;\n            if (message.member && message.member.nickname) {\n                name = message.member.nickname;\n            }\n\n            builder += `<span class=\"message-name\" onclick=\"bot.view.mentionUser('${message.author.id}')\">${name}</span><br/>`;\n        }\n\n        builder += `<span class=\"message-body\">${content}</span><br/>`;\n\n        builder += `</div>`;\n\n        this.chatContainer.innerHTML += builder;\n\n        while (this.chatContainer.children.length > 50) {\n            this.chatContainer.removeChild(this.chatContainer.firstChild);\n        }\n\n        message.attachments.forEach(attachment => {\n            if (/\\.(png|jpg|jpeg|gif|webp)/gi.test(attachment.filename)) {\n                this.chatContainer.innerHTML += `<img class=\"message-attachment\" src=\"${attachment.proxyURL}\" onclick=\"window.open('${attachment.url}').focus()\"></img>`;\n            }\n        });\n\n        this.scrollDown();\n    }\n\n    hideSplash() {\n        $('#splash').hidden = true;\n    }\n\n    scrollDown() {\n        this.chatContainer.scrollTop = this.chatContainer.scrollHeight + 1e3;\n    }\n}\n\nmodule.exports = View;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view.js\n// module id = 1\n// module chunks = 0","exports.discordToHtml = function (bot, input) {\n    return input.replace(/<#(\\d{18})>/g, (_, id) => {\n        const channel = bot.client.channels.get(id) || { name: 'deleted-channel' };\n        return `<a onclick=\"bot.setChannel('${id}')\">#${channel.name}</a>`;\n    }).replace(/<@\\!?(\\d{18})>/g, (_, id) => {\n        const user = bot.client.users.get(id) || { username: id };\n        return `<a onclick=\"bot.view.mentionUser('${id}')\">@${user.username}</a>`\n    }).replace(/<:.*?:(\\d{18})>/g, (_, id) => {\n        const emoji = bot.client.emojis.get(id);\n        if (emoji && emoji.url) {\n            return `<img class=\"emoji\" src=\"${emoji.url}\"></img>`;\n        }\n        return _;\n    });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/clean.js\n// module id = 2\n// module chunks = 0","const storage = require('./storage');\nconst View = require('./view');\n\nclass Bot {\n    constructor(token) {\n        if (!token) {\n            return console.log('Please set a bot token!');\n        }\n\n        storage.ls('discord.token', token);\n        this.token = token;\n\n        this.view = new View(this);\n\n        this.setupBot();\n    }\n\n    setupBot() {\n        if (this.client) {\n            return this.client.destroy().then(() => {\n                this.client = null;\n                this.setupBot();\n            });\n        }\n\n        this.client = new Discord.Client();\n\n        console.log('Client created');\n\n        this.client.on('ready', () => {\n            this.view.hideSplash();\n            this.view.updateGuilds();\n            this.view.updateChannels();\n\n            console.log(`Connected as ${this.client.user.username}#${this.client.user.discriminator} (${this.client.user.id})`);\n\n            let channel = storage.ls('discord.channel') || storage.qs('channel');\n            if (channel) {\n                this.setChannel(channel);\n            } else {\n                let guild = storage.ls('discord.guild') || storage.qs('guild');\n                if (guild) {\n                    this.setGuild(guild);\n                }\n            }\n        });\n\n        this.client.on('message', message => {\n            if (!this.targetChannel) return;\n\n            if (message.channel.id === this.targetChannel.id) {\n                this.view.displayMessage(message);\n            }\n        });\n\n        this.client.login(this.token);\n    }\n\n    setGuild(guild) {\n        if (this.targetGuild && this.targetGuild.id === guild) {\n            return;\n        }\n\n        this.targetGuild = this.client.guilds.get(guild);\n\n        storage.ls('discord.guild', guild);\n\n        this.view.updateGuilds();\n        this.view.updateChannels();\n    }\n\n    setChannel(channel) {\n        if (this.targetChannel && this.targetChannel.id === channel) {\n            return;\n        }\n\n        let newChannel = this.targetChannel = this.client.channels.get(channel);\n        if (newChannel.type !== 'text') {\n            return;\n        }\n\n        this.setGuild(newChannel.guild.id);\n\n        storage.ls('discord.channel', channel);\n\n        console.log('Fetching messages...');\n        newChannel.messages.fetch({ limit: 10 }).then(messages => {\n            messages.array().reverse().forEach(message => {\n                this.view.displayMessage(message);\n            });\n        });\n    }\n\n    sendMessage(message) {\n        if (!this.client || !this.targetChannel) {\n            console.log('You must select a channel first!');\n        } else {\n            this.targetChannel.send(message);\n        }\n    }\n}\n\nwindow.bot = window.bot || new Bot(storage.ls('discord.token') || storage.qs('token') || prompt('Please enter a token:'));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/index.js\n// module id = 3\n// module chunks = 0"],"sourceRoot":""}